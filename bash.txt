the first line for every bash script should be a shebang line
i.e. #!/bin/bash

the bash scripts should be executable
i.e. chmod +x <script_name>

bash comments start with a #

bash variables
________________
1. system variables
  - they start with capital letters
2. user variables- $USER
   - mostly start with small letters

examples of system variables
 $BASH, $BASH_VERSION, $HOME, $PWD, $SHELL, $TERM, $HOSTNAME, $HOSTTYPE, $OSTYPE, $MACHTYPE, $SECONDS, $PID, $PPID, $UID, $GID, $SHLVL, $0, $1, $2, $3, $4, $5, $6, $7, $8, $9

nb: - the variable name and value are separated by an equal sign minus space
    - variable names are case sensitive
    - variable names can be any combination of letters, numbers, underscores, and hyphens
    - variable names cannot start with a number
    - variable names cannot contain spaces

READING USER INPUT
__________________
use the read commmand to get user input
the name that comes after the read word is the name of the variable that will hold the user input

BASH ARGUMENTS
______________
the arguments that are passed to a bash script are stored in an array called $@
the first argument is stored in $1, the second in $2, etc.
$0 is the name of the script

IF STATEMENTS
_____________
if [ condition ]
then
    statements
fi

NB:
integer comparison operators
____________________________

-eq: equal to
-ne: not equal to
-gt: greater than
-ge: greater than or equal to
-lt: less than
-le: less than or equal to

  **** (when using the angle brackets, use double parentheses for the if statements)
  i.e
  if (( $1 > $2 ))
  then
    echo "The first number is greater than the second"
  fi

  **** for strings, when using the angle brackets, use double square brackets for the if statements
  i.e
  if [[ $word < "b]]
  then
    echo "The word is less than b"
  fi
< : less than 
> : greater than
<= : less than or equal to
>= : greater than or equal to

string comparison operators
____________________________

-z: string is empty (has zero length)
-n: string is not empty (has non-zero length)
==: string is equal to
=: string is equal to
!=: string is not equal to
<>: string is not equal to
>: string is greater than, in ASCII aphabetical order
<: string is less than, in ASCII alphabetical order

FILE TEST operators
___________________ 
-e file: file exists
-d file: directory exists
-f file: regular file exists (not a directory)
-r file: file is readable
-w file: file is writable
-x file: file is executable
-s file: file has non-zero size
-t file: file is a terminal (i.e. a TTY)
-z file: file has zero size
-c file: file is a character device
-b file: file is a block device
-p file: file is a named pipe
-S file: file is a socket
-u file: file has been changed since it was last read
-g file: file has been changed since it was last written
-k file: file has sticky bit set
-o file: file has the setuid bit set
-O file: file has the setgid bit set
-L file: file is a symbolic link
-h file: file is a symbolic link
-G file: file is a symbolic link

LOGICAL AND OPERATOR
____________________
&& or -a

LOGICAL OR OPERATOR
____________________
|| or -o

ARITHMETIC OPERATORS
____________________
echo considers the content to be a string
use $(( expression )) to evaluate the expression as an integer
or $(expr $var1 $op $var2)

FLOAT POINT OPERATORS
____________________
we need to use a special tool bc

the expression on the left is taken as an input for the right when pipe is used
e.G
echo "20.5 + 10.5" | bc
# the echo is taken as an input for the bc command

SWITCH STATEMENTS (CASE STATEMENTS)
____________________________________

case expression in
    pattern1)
        statements
        ;;
    pattern2)
        statements
        ;;
    pattern3)
        statements
        ;;
    *)
        statements
        ;;
esac

ARRAY DECLARATIONS
__________________
syntax: array_name=(element1 element2 element3 ...)